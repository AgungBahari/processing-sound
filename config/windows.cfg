BuildFlags.compilerFlags = ${BuildFlags.compilerFlags} $
  -m${targetArchitecture}
BuildFlags.userIncludes = ${BuildFlags.userIncludes} $
  ${javaIncludeDirectory} $
  ${javaIncludeDirectory}/win32

# Pass --kill-at to the linker in order to remove '@' suffixes from exported symbols
# See http://stackoverflow.com/questions/24398646/java-jni-native-library-loads-on-64bit-and-32bit-but-doesnt-run-on-32bit-solv
# and https://sourceware.org/binutils/docs/ld/Options.html#Options
# A better way would probably be to only export the symbols we need with dlltool.exe
BuildFlags.linkerFlags = ${BuildFlags.linkerFlags} $
  -m${targetArchitecture} $
  -Wl,--kill-at $
  -static-libgcc $
  -static-libstdc++
BuildFlags.libraryPath = ${BuildFlags.libraryPath} $
  library/windows${targetArchitecture}
